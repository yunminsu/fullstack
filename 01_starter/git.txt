1. 커밋 메시지 툴과 작성법
첫번째 라인: 제목(필수)
두번째 라인: 공란
세번째 라인부터: 내용 작성, 무엇을 왜
마지막 라인: 꼬리말(#이슈 넘버)(선택)

작성팁: 최대한 구체적으로 작성, 개인적인 팁으로 주간 보고에 그대로 쓸 정도로 작성

2. 커밋 전에 diff 확인하기! 매우 좋은 습관!!

3. 왜 굳이 git add -> commit 두 단계에 걸쳐서 하는지?
모든 파일을 굳이 기록할 필요가 없기 때문
버전을 여러개로 나눠서 만들고 싶은 경우
1) git add로 기록할 파일을 고르고
2) git commit으로 버전 생성(기록 완료)

4. 언제, 얼마나 commit 하는게 좋을까?
ctrl + s 누르는 것 처럼 5초마다 습관적으로 할 필요는 없고
간단한 기능을 하나 추가할 때 마다 commit 하면 됨

예를 들어 웹 개발시 회원가입 기능을 만든다고 하면
- 회원가입 폼 레이아웃 UI를 만들면 commit 하고
- 입력한 이메일이 맞는지 검증하는 기능(유효성 검사)을 만들었으면 commit 하고
- 서버로 데이터를 전송하는 기능을 만들었으면 commit 하고

대충 이렇게 작은 작업 하나 마쳤으면 commit 하는게 좋음
물론 3개 다 만들고 commit 하는 사람들도 있음
중요한건 하루 1개 이상 커밋을 할 것! (좋은 습관)

5. CLI 명령어 기반 vs GUI 툴 비교
명령어는 모든 기능을 사용 가능한 반면 GUI 툴은 툴 자체에 구현된 기능만 쓸 수 있음

6. git push -u origin main
-u 옵션은 방금 입력한 주소를 기억해라
그 다음부터는 주소를 입력하지 않고 git push만 입력해도 됨

7. git remote -v
원격저장소 정보를 보고 싶을 때

8. git clone https://원격 저장소 주소
원격저장소에 올린 프로젝트를 내 로컬에 복제(1번만 하면 됨)

9. git pull origin main
원격저장소에 있는 모든 브랜치 내용을 가져와서 로컬 저장소에 합치라는 뜻
git pull origin main
특정 브랜치(main)만 가져올 수 있음

(중요) 작업하기 전에 git pull을 받아서 항상 최신 상태로 만들어놓고 작업 시작!!

10. 저장소에 올리지 않을 파일들은 .gitignore
설정 파일이나 빌드 산출물, 기타 라이브러리 파일들 등
불필요한 파일들은 올리지 않는 것이 좋음
.gitignore 파일을 만들어서 올리지 않을 폴더나 파일을 명시하면 됨
그러면 git에서 해당 폴더랑 파일을 무시함

과제:
파일을 새로 만들거나 수정하면서 commit을 5번 이상 해보기
중간중간 git status, git log도 써보기


# Git 추가 수업
## 브랜치란?
branch: 독립적인 작업을 위한 프로젝트의 가지
(branch 뜻? 나뭇가지, 지사[분점], 갈라지다[나뉘다])
브랜치끼리는 영향을 받지 않음(독립적이다.), 한 프로젝트에서 동시에 병렬로 여러 작업을 진행 가능
(브랜치를 딴다 = 가지 치기)
깃의 브랜치 전략은 회사마다 다름(일반적으로 많이 쓰이는 전략이 git flow)

## 브랜치 이점? 
0) 내가 작업하는 동안에는 충돌 발생 안함. 마지막에 Merge(병합) 할 때 충돌 발생 시 한 번만 해결하면 됨!
1) 기능 만들다 뭐가 잘못되면 브랜치를 버리면 됨
2) 깃 이력 관리가 체계적
3) 용도에 맞게 다양하게 사용 가능(main, develop, feature, release, hotfix)
- 활용 예: git flow 전략
  - main(master): 기준이 되는 브랜치로 제품을 배포(출시)하는 브랜치
  - develop: 개발 브랜치, 각자 작업한 기능들을 여기에 합친다. 즉, 다음 버전을 개발하는 브랜치
  - feature: 단위 기능을 개발하는 브랜치, 기능 개발이 완료되면 develop 브랜치에 병합한다. (feature/, feature-)
  - release: 배포를 위해 main 브랜치로 보내기 전에 QA(품질검사)를 하기 위한 브랜치
  - hotfix: 배포(출시) 버전에서 버그가 생겼을 때 긴급 수정하는 브랜치

  ## git 브랜치 연습